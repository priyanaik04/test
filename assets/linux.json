[
    {
        "0": "Which of the following is an example of encapsulation in object-oriented design?",
        "1": "Which of the following best describes inheritance in object-oriented design?",
        "2": "Which of the following best describes polymorphism in object-oriented design?",
        "3": "Which of the following is an example of abstraction in object-oriented design?",
        "4": "Which of the following is not a principle of object-oriented design?",
        "5": "Which of the following keyword is used to define a function in Python ?",
        "6": "Which function finds out the Variable type in Python ?",
        "7": "Which of the following keyword is used to define a function in Python ?",
        "8": "Which function finds out the Variable type in Python ?",
        "9": "Which of the following keyword is used to define a function in Python ?"
    },
    {
        "0": {
            "a": "Inheritance",
            "b": "Polymorphism",
            "c": "Abstraction",
            "d": "Private Data Members and public getters and setters"
        },
        "1": {
            "a": "The ability of an object to take on many forms",
            "b": "The ability to reuse code by creating new classes based on existing ones",
            "c": "The ability to group related classes into packages",
            "d": "The ability to access members of a class from outside the class"
        },
        "2": {
            "a": "The ability to take on many forms",
            "b": "The ability to reuse code by creating new classes based on existing ones",
            "c": "The ability to group related classes into packages",
            "d": "The ability to access members of a class from outside the class"
        },
        "3": {
            "a": "Private data members",
            "b": "Public getters and setters",
            "c": "Interfaces",
            "d": "Inheritance"
        },
        "4": {
            "a": "Encapsulation",
            "b": "Inheritance",
            "c": "Modularity",
            "d": "Efficiency"
        },
        "5": {
            "a": "func",
            "b": "def",
            "c": "void",
            "d": "function"
        },
        "6": {
            "a": "typedef",
            "b": "typeof",
            "c": "type",
            "d": "find"
        },
        "7": {
            "a": "func",
            "b": "def",
            "c": "void",
            "d": "function"
        },
        "8": {
            "a": "typedef",
            "b": "typeof",
            "c": "type",
            "d": "find"
        },
        "9": {
            "a": "func",
            "b": "def",
            "c": "void",
            "d": "function"
        }
    },
    {
        "0": "Private Data Members and public getters and setters",
        "1": "The ability to reuse code by creating new classes based on existing ones",
        "2": "The ability to take on many forms",
        "3": "Interfaces",
        "4": "type",
        "5": "def",
        "6": "type",
        "7": "def",
        "8": "type",
        "9": "def"
    }
]